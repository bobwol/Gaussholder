/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/index.js":
/*!*************************!*\
  !*** ./assets/index.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_gaussholder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/gaussholder */ "./assets/src/gaussholder.js");

window.Gaussholder = Object(_src_gaussholder__WEBPACK_IMPORTED_MODULE_0__["default"])();

/***/ }),

/***/ "./assets/src/gaussholder.js":
/*!***********************************!*\
  !*** ./assets/src/gaussholder.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _render_image_into_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render-image-into-canvas */ "./assets/src/render-image-into-canvas.js");
 // Fade duration in ms when the image loads in.

var FADE_DURATION = 800;
/* harmony default export */ __webpack_exports__["default"] = (function () {
  /**
   * Render placeholder for an image
   *
   * @param {HTMLImageElement} element Element to render placeholder for
   */
  var handleElement = function handleElement(element) {
    if (!('gaussholder' in element.dataset)) {
      return;
    }

    var canvas = document.createElement('canvas');
    var final = element.dataset.gaussholderSize.split(','); // Set the dimensions...

    element.style.width = final[0] + 'px';
    element.style.height = final[1] + 'px'; // ...then recalculate based on what it actually renders as

    var original = [final[0], final[1]];

    if (element.width < final[0]) {
      // Rescale, keeping the aspect ratio
      final[0] = element.width;
      final[1] = final[1] * (final[0] / original[0]);
    } else if (element.height < final[1]) {
      // Rescale, keeping the aspect ratio
      final[1] = element.height;
      final[0] = final[0] * (final[1] / original[1]);
    } // Set dimensions, _again_


    element.style.width = final[0] + 'px';
    element.style.height = final[1] + 'px';
    Object(_render_image_into_canvas__WEBPACK_IMPORTED_MODULE_0__["default"])(canvas, element.dataset.gaussholder.split(','), final, function () {
      // Load in as our background image
      element.style.backgroundImage = 'url("' + canvas.toDataURL() + '")';
      element.style.backgroundRepeat = 'no-repeat';
    });
  };

  var loadOriginal = function loadOriginal(element) {
    if (!('originalsrc' in element.dataset) && !('originalsrcset' in element.dataset)) {
      return;
    }

    var data = element.dataset.gaussholderSize.split(','),
        radius = parseInt(data[2]); // Load our image now

    var img = new Image();

    if (element.dataset.originalsrc) {
      img.src = element.dataset.originalsrc;
    }

    if (element.dataset.originalsrcset) {
      img.srcset = element.dataset.originalsrcset;
    }

    img.onload = function () {
      // Filter property to use
      var filterProp = 'webkitFilter' in element.style ? 'webkitFilter' : 'filter';
      element.style[filterProp] = 'blur(' + radius * 0.5 + 'px)'; // Ensure blur doesn't bleed past image border

      element.style.clipPath = 'url(#gaussclip)'; // Current FF

      element.style.clipPath = 'inset(0)'; // Standard

      element.style.webkitClipPath = 'inset(0)'; // WebKit
      // Set the actual source

      element.src = img.src;
      element.srcset = img.srcset; // Cleaning source

      element.dataset.originalsrc = '';
      element.dataset.originalsrcset = ''; // Clear placeholder temporary image
      // (We do this after setting the source, as doing it before can
      // cause a tiny flicker)

      element.style.backgroundImage = '';
      element.style.backgroundRepeat = '';
      var start = 0;

      var anim = function anim(ts) {
        if (!start) start = ts;
        var diff = ts - start;

        if (diff > FADE_DURATION) {
          element.style[filterProp] = '';
          element.style.clipPath = '';
          element.style.webkitClipPath = '';
          return;
        }

        var effectiveRadius = radius * (1 - diff / FADE_DURATION);
        element.style[filterProp] = 'blur(' + effectiveRadius * 0.5 + 'px)';
        window.requestAnimationFrame(anim);
      };

      window.requestAnimationFrame(anim);
    };
  };

  var loadLazily = [];
  var threshold = 1200;
  var lastRun = 0,
      loopTimeout = null;

  var scrollHandler = function scrollHandler() {
    var now = Date.now();

    if (lastRun + 40 > now) {
      if (loopTimeout) {
        return;
      }

      loopTimeout = window.setTimeout(scrollHandler, 40);
      return;
    }

    lastRun = now;
    loopTimeout && (loopTimeout = null);
    var next = [];

    for (var i = loadLazily.length - 1; i >= 0; i--) {
      var img = loadLazily[i];
      var shouldShow = img.getBoundingClientRect().top <= window.innerHeight + threshold;

      if (!shouldShow) {
        next.push(img);
        continue;
      }

      loadOriginal(img);
    }

    loadLazily = next;

    if (loadLazily.length < 1) {
      window.removeEventListener('scroll', scrollHandler);
    }
  };
  /**
   * Render all placeholders on the page
   */


  return function () {
    var images = document.getElementsByTagName('img');

    for (var i = images.length - 1; i >= 0; i--) {
      var img = images[i]; // Ensure the blank GIF has loaded first

      if (img.complete) {
        handleElement(img);
      } else {
        img.onload = function () {
          handleElement(this);
        };
      }
    }

    loadLazily = images;
    scrollHandler();

    if (loadLazily.length > 0) {
      window.addEventListener('scroll', scrollHandler);
    }
  };
});

/***/ }),

/***/ "./assets/src/reconstitute-image.js":
/*!******************************************!*\
  !*** ./assets/src/reconstitute-image.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function arrayBufferToBase64(buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;

  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }

  return window.btoa(binary);
}

function reconstituteImage(header, image) {
  var image_data = image[0],
      width = parseInt(image[1]),
      height = parseInt(image[2]);
  var full = atob(header.header) + atob(image_data);
  var bytes = new Uint8Array(full.length);

  for (var i = 0; i < full.length; i++) {
    bytes[i] = full.charCodeAt(i);
  } // Poke the bits.


  bytes[header.height_offset] = height >> 8 & 0xFF;
  bytes[header.height_offset + 1] = height & 0xFF;
  bytes[header.length_offset] = width >> 8 & 0xFF;
  bytes[header.length_offset + 1] = width & 0xFF; // Back to a full JPEG now.

  return arrayBufferToBase64(bytes);
}

/* harmony default export */ __webpack_exports__["default"] = (reconstituteImage);

/***/ }),

/***/ "./assets/src/render-image-into-canvas.js":
/*!************************************************!*\
  !*** ./assets/src/render-image-into-canvas.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _reconstitute_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reconstitute-image */ "./assets/src/reconstitute-image.js");
/* harmony import */ var _stackblur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackblur */ "./assets/src/stackblur.js");


var _window = window,
    GaussholderHeader = _window.GaussholderHeader;
/**
 * Render an image into a Canvas
 *
 * @param {HTMLCanvasElement} canvas Canvas element to render into
 * @param {list} image 3-tuple of base64-encoded image data, width, height
 * @param {list} final Final width and height
 */

function renderImageIntoCanvas(canvas, image, final, cb) {
  var ctx = canvas.getContext('2d'),
      width = parseInt(final[0]),
      height = parseInt(final[1]),
      radius = parseInt(final[2]); // Ensure smoothing is off

  ctx.mozImageSmoothingEnabled = false;
  ctx.webkitImageSmoothingEnabled = false;
  ctx.msImageSmoothingEnabled = false;
  ctx.imageSmoothingEnabled = false;
  var img = new Image();
  img.src = 'data:image/jpg;base64,' + Object(_reconstitute_image__WEBPACK_IMPORTED_MODULE_0__["default"])(GaussholderHeader, image);

  img.onload = function () {
    canvas.width = width;
    canvas.height = height;
    ctx.drawImage(img, 0, 0, width, height);
    _stackblur__WEBPACK_IMPORTED_MODULE_1__["default"].canvasRGB(canvas, 0, 0, width, height, radius);
    cb();
  };
}

/* harmony default export */ __webpack_exports__["default"] = (renderImageIntoCanvas);

/***/ }),

/***/ "./assets/src/stackblur.js":
/*!*********************************!*\
  !*** ./assets/src/stackblur.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
    StackBlur - a fast almost Gaussian Blur For Canvas

    Version:     0.5
    Author:        Mario Klingemann
    Contact:     mario@quasimondo.com
    Website:    http://www.quasimondo.com/StackBlurForCanvas
    Twitter:    @quasimondo

    In case you find this class useful - especially in commercial projects -
    I am not totally unhappy for a small donation to my PayPal account
    mario@quasimondo.de

    Or support me on flattr:
    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

    Copyright (c) 2010 Mario Klingemann

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
    */
var StackBlur = function StackBlur() {
  var mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
  var shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];

  function getImageDataFromCanvas(canvas, top_x, top_y, width, height) {
    if (typeof canvas == 'string') var canvas = document.getElementById(canvas);else if (!canvas instanceof HTMLCanvasElement) return;
    var context = canvas.getContext('2d');
    var imageData;

    try {
      // try {
      imageData = context.getImageData(top_x, top_y, width, height);
      /*} catch(e) {
           // NOTE: this part is supposedly only needed if you want to work with local files
          // so it might be okay to remove the whole try/catch block and just use
          // imageData = context.getImageData(top_x, top_y, width, height);
          try {
              netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
              imageData = context.getImageData(top_x, top_y, width, height);
          } catch(e) {
              alert("Cannot access local image");
              throw new Error("unable to access local image data: " + e);
              return;
          }
      }*/
    } catch (e) {
      throw new Error("unable to access image data: " + e);
    }

    return imageData;
  }

  function processCanvasRGB(canvas, top_x, top_y, width, height, radius) {
    if (isNaN(radius) || radius < 1) return;
    radius |= 0;
    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);
    imageData = processImageDataRGB(imageData, top_x, top_y, width, height, radius);
    canvas.getContext('2d').putImageData(imageData, top_x, top_y);
  }

  function processImageDataRGB(imageData, top_x, top_y, width, height, radius) {
    var pixels = imageData.data;
    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, r_out_sum, g_out_sum, b_out_sum, r_in_sum, g_in_sum, b_in_sum, pr, pg, pb, rbs;
    var div = radius + radius + 1;
    var w4 = width << 2;
    var widthMinus1 = width - 1;
    var heightMinus1 = height - 1;
    var radiusPlus1 = radius + 1;
    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
    var stackStart = new BlurStack();
    var stack = stackStart;

    for (i = 1; i < div; i++) {
      stack = stack.next = new BlurStack();
      if (i == radiusPlus1) var stackEnd = stack;
    }

    stack.next = stackStart;
    var stackIn = null;
    var stackOut = null;
    yw = yi = 0;
    var mul_sum = mul_table[radius];
    var shg_sum = shg_table[radius];

    for (y = 0; y < height; y++) {
      r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;
      r_out_sum = radiusPlus1 * (pr = pixels[yi]);
      g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
      b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
      r_sum += sumFactor * pr;
      g_sum += sumFactor * pg;
      b_sum += sumFactor * pb;
      stack = stackStart;

      for (i = 0; i < radiusPlus1; i++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack = stack.next;
      }

      for (i = 1; i < radiusPlus1; i++) {
        p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
        r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
        g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
        b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
        r_in_sum += pr;
        g_in_sum += pg;
        b_in_sum += pb;
        stack = stack.next;
      }

      stackIn = stackStart;
      stackOut = stackEnd;

      for (x = 0; x < width; x++) {
        pixels[yi] = r_sum * mul_sum >> shg_sum;
        pixels[yi + 1] = g_sum * mul_sum >> shg_sum;
        pixels[yi + 2] = b_sum * mul_sum >> shg_sum;
        r_sum -= r_out_sum;
        g_sum -= g_out_sum;
        b_sum -= b_out_sum;
        r_out_sum -= stackIn.r;
        g_out_sum -= stackIn.g;
        b_out_sum -= stackIn.b;
        p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;
        r_in_sum += stackIn.r = pixels[p];
        g_in_sum += stackIn.g = pixels[p + 1];
        b_in_sum += stackIn.b = pixels[p + 2];
        r_sum += r_in_sum;
        g_sum += g_in_sum;
        b_sum += b_in_sum;
        stackIn = stackIn.next;
        r_out_sum += pr = stackOut.r;
        g_out_sum += pg = stackOut.g;
        b_out_sum += pb = stackOut.b;
        r_in_sum -= pr;
        g_in_sum -= pg;
        b_in_sum -= pb;
        stackOut = stackOut.next;
        yi += 4;
      }

      yw += width;
    }

    for (x = 0; x < width; x++) {
      g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;
      yi = x << 2;
      r_out_sum = radiusPlus1 * (pr = pixels[yi]);
      g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
      b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
      r_sum += sumFactor * pr;
      g_sum += sumFactor * pg;
      b_sum += sumFactor * pb;
      stack = stackStart;

      for (i = 0; i < radiusPlus1; i++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack = stack.next;
      }

      yp = width;

      for (i = 1; i <= radius; i++) {
        yi = yp + x << 2;
        r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
        g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
        b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
        r_in_sum += pr;
        g_in_sum += pg;
        b_in_sum += pb;
        stack = stack.next;

        if (i < heightMinus1) {
          yp += width;
        }
      }

      yi = x;
      stackIn = stackStart;
      stackOut = stackEnd;

      for (y = 0; y < height; y++) {
        p = yi << 2;
        pixels[p] = r_sum * mul_sum >> shg_sum;
        pixels[p + 1] = g_sum * mul_sum >> shg_sum;
        pixels[p + 2] = b_sum * mul_sum >> shg_sum;
        r_sum -= r_out_sum;
        g_sum -= g_out_sum;
        b_sum -= b_out_sum;
        r_out_sum -= stackIn.r;
        g_out_sum -= stackIn.g;
        b_out_sum -= stackIn.b;
        p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;
        r_sum += r_in_sum += stackIn.r = pixels[p];
        g_sum += g_in_sum += stackIn.g = pixels[p + 1];
        b_sum += b_in_sum += stackIn.b = pixels[p + 2];
        stackIn = stackIn.next;
        r_out_sum += pr = stackOut.r;
        g_out_sum += pg = stackOut.g;
        b_out_sum += pb = stackOut.b;
        r_in_sum -= pr;
        g_in_sum -= pg;
        b_in_sum -= pb;
        stackOut = stackOut.next;
        yi += width;
      }
    }

    return imageData;
  }

  function BlurStack() {
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.a = 0;
    this.next = null;
  }

  return {
    canvasRGB: processCanvasRGB
  };
};

/* harmony default export */ __webpack_exports__["default"] = (StackBlur);

/***/ }),

/***/ 0:
/*!*******************************!*\
  !*** multi ./assets/index.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./assets/index.js */"./assets/index.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,